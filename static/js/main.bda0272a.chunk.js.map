{"version":3,"sources":["image.png","features/ImagePixelatedDemo/ImagePixelatedDemo.tsx","features/ElementPixelateDemo/ElementPixelateDemo.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ImagePixelatedDemo","useState","width","setWidth","height","setHeight","centered","setCentered","pixelSize","setPixelSize","fillTransparencyColor","setFillTransparencyColor","debounceHandler","useDebouncedCallback","value","func","style","display","alignItems","justifyContent","marginBottom","src","imgSrc","className","htmlFor","defaultValue","name","type","placeholder","onChange","e","parseInt","target","min","step","defaultChecked","fontSize","checked","ElementPixelatedDemo","textAlign","fontWeight","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bda0272a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/image.be024a10.png\";","import React, { useState } from \"react\";\nimport { ImagePixelated } from \"react-pixelate\";\nimport imgSrc from \"../../image.png\";\nimport \"./style.css\";\nimport { useDebouncedCallback } from \"use-debounce\";\n\nexport const ImagePixelatedDemo = () => {\n  const [width, setWidth] = useState<number>();\n  const [height, setHeight] = useState<number>();\n  const [centered, setCentered] = useState<boolean>();\n  const [pixelSize, setPixelSize] = useState<number>(5);\n  const [fillTransparencyColor, setFillTransparencyColor] = useState<string>(\n    \"white\"\n  );\n  const debounceHandler = useDebouncedCallback(\n    (value, func) => {\n      func(value);\n    },\n    // delay in ms\n    200\n  );\n\n  return (\n    <>\n      <h3>Image Pixelated</h3>\n      <div\n        style={{\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"space-around\",\n          marginBottom: 30,\n          width: \"100%\",\n        }}\n      >\n        <div>\n          <p>Original Image</p>\n          <img src={imgSrc} />\n        </div>\n        <div>\n          <p>Pixelated Image</p>\n          <ImagePixelated\n            src={imgSrc}\n            width={width}\n            height={height}\n            pixelSize={pixelSize}\n            centered={centered}\n            fillTransparencyColor={fillTransparencyColor}\n          />\n        </div>\n        <div>\n          <form>\n            <div className=\"form-item\">\n              <label className=\"form-label\" htmlFor=\"width\">\n                Width:\n              </label>\n              <input\n                defaultValue={width}\n                name=\"width\"\n                type=\"number\"\n                placeholder=\"Original Width\"\n                onChange={(e) =>\n                  debounceHandler(parseInt(e.target.value || \"0\"), setWidth)\n                }\n              />\n            </div>\n            <div className=\"form-item\">\n              <label className=\"form-label\" htmlFor=\"height\">\n                Height:\n              </label>\n              <input\n                defaultValue={height}\n                name=\"height\"\n                type=\"number\"\n                placeholder=\"Original Height\"\n                onChange={(e) => setHeight(parseInt(e.target.value || \"0\"))}\n              />\n            </div>\n            <div className=\"form-item\">\n              <label className=\"form-label\" htmlFor=\"pixelSize\">\n                PixelSize:\n              </label>\n              <input\n                key={pixelSize}\n                defaultValue={pixelSize}\n                name=\"pixelSize\"\n                type=\"number\"\n                style={{ width: 50 }}\n                onChange={(e) =>\n                  debounceHandler(parseInt(e.target.value || \"0\"), setPixelSize)\n                }\n              />\n              <input\n                key={pixelSize + 1}\n                defaultValue={pixelSize}\n                name=\"pixelSize\"\n                type=\"range\"\n                min={0}\n                step={1}\n                onChange={(e) =>\n                  debounceHandler(parseInt(e.target.value || \"0\"), setPixelSize)\n                }\n              />\n            </div>\n            <div className=\"form-item\">\n              <label className=\"form-label\" htmlFor=\"center\">\n                Centered:\n              </label>\n              <input\n                defaultChecked={centered}\n                name=\"center\"\n                type=\"checkbox\"\n                style={{ fontSize: 100 }}\n                onChange={(e) => debounceHandler(e.target.checked, setCentered)}\n              />\n            </div>\n            <div className=\"form-item\">\n              <label className=\"form-label\" htmlFor=\"fillTransparencyColor\">\n                FillTransparencyColor:\n              </label>\n              <input\n                defaultValue=\"#ffffff\"\n                name=\"fillTransparencyColor\"\n                type=\"color\"\n                onChange={(e) =>\n                  debounceHandler(e.target.value, setFillTransparencyColor)\n                }\n              />\n            </div>\n          </form>\n        </div>\n      </div>\n    </>\n  );\n};\n","import React, { useState } from \"react\";\nimport { ElementPixelated } from \"react-pixelate\";\nimport useDebouncedCallback from \"use-debounce/lib/useDebouncedCallback\";\n\nexport const ElementPixelatedDemo = () => {\n  const [pixelSize, setPixelSize] = useState<number>(5);\n  const debounceHandler = useDebouncedCallback(\n    (value, func) => {\n      func(value);\n    },\n    // delay in ms\n    200\n  );\n  return (\n    <>\n      <h3>Element Pixelated</h3>\n      <div\n        style={{\n          display: \"flex\",\n          alignItems: \"start\",\n          justifyContent: \"space-around\",\n          marginBottom: 30,\n          width: \"100%\",\n        }}\n      >\n        <div>\n          <p>Original div element</p>\n          <div style={{ width: 500 }}>\n            This is the text want to be pixelated. set pixelSize to be 0 to see\n            the text\n          </div>\n        </div>\n        <div>\n          <p>Pixelated div element</p>\n          <ElementPixelated pixelSize={pixelSize}>\n            <div>\n              This is the text want to be pixelated. set pixelSize to be 0 to\n              see the text\n            </div>\n          </ElementPixelated>\n        </div>\n        <div>\n          <form>\n            <div className=\"form-item\">\n              <label\n                style={{\n                  textAlign: \"left\",\n                  fontSize: 20,\n                  fontWeight: 500,\n                  width: 100,\n                }}\n                htmlFor=\"pixelSize\"\n              >\n                PixelSize:\n              </label>\n              <input\n                key={pixelSize}\n                defaultValue={pixelSize}\n                name=\"pixelSize\"\n                type=\"number\"\n                style={{ width: 50 }}\n                onChange={(e) =>\n                  debounceHandler(parseInt(e.target.value || \"0\"), setPixelSize)\n                }\n              />\n              <input\n                key={pixelSize + 1}\n                defaultValue={pixelSize}\n                name=\"pixelSize\"\n                type=\"range\"\n                min={0}\n                step={1}\n                onChange={(e) =>\n                  debounceHandler(parseInt(e.target.value || \"0\"), setPixelSize)\n                }\n              />\n            </div>\n          </form>\n        </div>\n      </div>\n    </>\n  );\n};\n","import \"./App.css\";\nimport { ImagePixelatedDemo } from \"./features/ImagePixelatedDemo\";\nimport { ElementPixelatedDemo } from \"./features/ElementPixelateDemo\";\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <h1>React Pixelated Demo</h1>\n      <ImagePixelatedDemo />\n      <ElementPixelatedDemo />\n    </div>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}